name: CI-MAIN

on:
  push:
    branches: ['main']

env:
  IMAGE_NAME: laa-sds-api

jobs:

  deploy_test:
    environment: test
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Build Docker Image
      run:
        docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

    - name: Assume AWS Role
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.TEST_ECR_ROLE_TO_ASSUME }}
        aws-region: ${{ vars.TEST_ECR_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr-dev
      uses: aws-actions/amazon-ecr-login@v1

    - name: Store ECR endpoint as output
      id: ecr-url-output
      run: echo "::set-output name=ecr_url::${{ steps.login-ecr-dev.outputs.registry }}/${{ vars.TEST_ECR_REPOSITORY }}"

    - name: Push to ECR
      id: ecr
      env:
        ECR_URL: ${{ steps.ecr-url-output.outputs.ecr_url }}
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} $ECR_URL:${{ github.sha }}
        docker push $ECR_URL:${{ github.sha }}

    - name: Deploy TEST
      uses: ./.github/actions/deploy
      with:
        ecr-url: ${{ steps.ecr-url-output.outputs.ecr_url }}
        kube-cert: ${{ secrets.TEST_KUBE_CERT }}
        kube-token: ${{ secrets.TEST_KUBE_TOKEN }}
        kube-cluster: ${{ secrets.TEST_KUBE_CLUSTER }}
        kube-namespace: ${{ secrets.TEST_KUBE_NAMESPACE }}
        irsa-sa-environment: 'uat'
        bucket-secret-ref: 'laa-sds-s3-equiniti-output'
        tenant_id: ${{secrets.TEST_TENANT_ID}}
        audience: ${{secrets.TEST_AUDIENCE}}
        sentry_dsn: ${{secrets.TEST_SENTRY_DSN}}
        casbin_policy: ${{vars.CASBIN_POLICY}}
        casbin_model: ${{vars.CASBIN_MODEL}}

  deploy_staging:
    needs: deploy_test
    environment: staging
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Build Docker Image
      run:
        docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

    - name: Assume AWS Role
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.STAGING_ECR_ROLE_TO_ASSUME }}
        aws-region: ${{ vars.STAGING_ECR_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr-dev
      uses: aws-actions/amazon-ecr-login@v1

    - name: Store ECR endpoint as output
      id: ecr-url-output
      run: echo "::set-output name=ecr_url::${{ steps.login-ecr-dev.outputs.registry }}/${{ vars.STAGING_ECR_REPOSITORY }}"

    - name: Push to ECR
      id: ecr
      env:
        ECR_URL: ${{ steps.ecr-url-output.outputs.ecr_url }}
      run: |
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} $ECR_URL:${{ github.sha }}
        docker push $ECR_URL:${{ github.sha }}

    - name: Deploy STAGING
      uses: ./.github/actions/deploy
      with:
        ecr-url: ${{ steps.ecr-url-output.outputs.ecr_url }}
        kube-cert: ${{ secrets.STAGING_KUBE_CERT }}
        kube-token: ${{ secrets.STAGING_KUBE_TOKEN }}
        kube-cluster: ${{ secrets.STAGING_KUBE_CLUSTER }}
        kube-namespace: ${{ secrets.STAGING_KUBE_NAMESPACE }}
        irsa-sa-environment: 'staging'
        bucket-secret-ref: 'laa-sds-s3-equiniti-output'
        tenant_id: ${{secrets.STAGING_TENANT_ID}}
        audience: ${{secrets.STAGING_AUDIENCE}}
        sentry_dsn: ${{secrets.STAGING_SENTRY_DSN}}
        casbin_policy: ${{vars.CASBIN_POLICY}}
        casbin_model: ${{vars.CASBIN_MODEL}}

  deploy_prod:
    needs: deploy_staging
    environment: prod
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Docker Image
        run:
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.PROD_ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.PROD_ECR_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr-dev
        uses: aws-actions/amazon-ecr-login@v1

      - name: Store ECR endpoint as output
        id: ecr-url-output
        run: echo "::set-output name=ecr_url::${{ steps.login-ecr-dev.outputs.registry }}/${{ vars.PROD_ECR_REPOSITORY }}"

      - name: Push to ECR
        id: ecr
        env:
          ECR_URL: ${{ steps.ecr-url-output.outputs.ecr_url }}
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} $ECR_URL:${{ github.sha }}
          docker push $ECR_URL:${{ github.sha }}

      - name: Deploy PROD
        uses: ./.github/actions/deploy
        with:
          ecr-url: ${{ steps.ecr-url-output.outputs.ecr_url }}
          kube-cert: ${{ secrets.PROD_KUBE_CERT }}
          kube-token: ${{ secrets.PROD_KUBE_TOKEN }}
          kube-cluster: ${{ secrets.PROD_KUBE_CLUSTER }}
          kube-namespace: ${{ secrets.PROD_KUBE_NAMESPACE }}
          irsa-sa-environment: 'production'
          bucket-secret-ref: 'laa-sds-s3-equiniti-output'
          tenant_id: ${{secrets.PROD_TENANT_ID}}
          audience: ${{secrets.PROD_AUDIENCE}}
          sentry_dsn: ${{secrets.PROD_SENTRY_DSN}}
          casbin_policy: ${{vars.CASBIN_POLICY}}
          casbin_model: ${{vars.CASBIN_MODEL}}
