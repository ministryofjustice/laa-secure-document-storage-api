name: Pytest End-to-end Tests

on:
  push:
    branches:
      - main  # Run on main branch push
  pull_request:
    branches:
      - main  # Run on pull requests to main branch
  workflow_dispatch: # Manually trigger the workflow

jobs:
  test:
    runs-on: ubuntu-latest

    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Make localhost URL available
        run: echo '127.0.0.1   localhost' >> /etc/hosts

      - name: Obtain Octo STS Token
        uses: octo-sts/action@d6c70ad3b9ac85df6da6b9749014d7283987cfec # v1.0.3
        id: octo_sts
        with:
          scope: '${{ vars.CLIENT_CONFIGS_REPOSITORY }}'              # Reference to repository you want to consume
          identity: ministryofjustice-laa-secure-document-storage-api # Same as the filename in the private repo

      - name: Checkout client configs
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: 'false'
          token: '${{ steps.octo_sts.outputs.token }}'
          repository: '${{ vars.CLIENT_CONFIGS_REPOSITORY }}'
          path: './clientconfigs'
          ref: 'main'
          sparse-checkout: 'clientconfigs'

      - name: Check configs
        run: |
          ls ./clientconfigs/

      - name: Install AWS Local
        run: pip install awscli-local

      - name: Install LocalStack CLI
        run: pip install localstack

      - name: Setup AWS Credentials Directory
        run: mkdir -p ~/.aws

      - name: aws configure command
        run: |
          aws configure set aws_access_key_id test
          aws configure set aws_secret_access_key test

      - name: run ls command
        run: cat ~/.aws/credentials

      - name: Setup Containers
        run: |
          export AWS_ACCESS_KEY_ID=test
          export AWS_ACCESS_KEY=test
          docker compose -f docker-compose.yaml -f docker-compose.postman.yaml up --build -d
        env:
          TENANT_ID: ${{ secrets.TENANT_ID }}
          AUDIENCE_ID: ${{ secrets.AUDIENCE_ID }}

      - name: Wait 60 seconds for ClamAV
        run: sleep 60
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pipenv
          pipenv run pipenv install

      - name: Install test dependencies
        run: |
          pipenv run pipenv install --dev

      - name: Run Pytest e2e Tests
        run: |
          pipenv run pytest -v -m e2e
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

      - name: SDS API logs
        if: always()
        run: |
          docker container ls --format "{{.Names}}" | while read -r container
          do
            echo "Fetching logs for $container"
            docker logs "$container"
          done
