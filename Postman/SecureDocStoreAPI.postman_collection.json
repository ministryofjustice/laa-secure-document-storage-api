{
	"info": {
		"_postman_id": "5509461b-191e-40b7-b23f-0a5d4a3b50c0",
		"name": "SecureDocStoreAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28356037"
	},
	"item": [
		{
			"name": "Retrieve File",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response body shows success\", function() {",
							"    pm.expect(pm.response.json().Hello).to.equal('World');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/retrieve_file?file_key=README",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"retrieve_file"
					],
					"query": [
						{
							"key": "file_key",
							"value": "README"
						}
					]
				}
			},
			"response": [],
			"item": [
				
			]
		},
		{
			"name": "Audit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response body shows success\", function () {",
							"  pm.expect(pm.response.json()).to.eql({'Hello': 'World'});",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://127.0.0.1:8000/audit"
			},
			"response": [],
			"item": [
				
			]
		},
		{
			"name": "Requesting a File in the CRM14 Folder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify getting a URL for a file in the CRM14 folder",
							"",
							"pm.test(\"Get URL for file in CRM14 folder\", function () {",
							"    pm.expect(pm.response.code).to.equal(200); // Ensure the response code is 200 OK",
							"    pm.expect(pm.response.json()).to.have.property(\"url\"); // Assuming response contains a JSON with a \"url\" property",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://127.0.0.1:8000/"
			},
			"response": [],
			"item": [
				
			]
		},
		{
			"name": "Requesting a File Not in the CRM14 Folder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify getting a URL for a file not in the CRM14 folder",
							"",
							"pm.test(\"Get URL for file not in CRM14 folder\", function () {",
							"    pm.expect(pm.response.code).to.equal(200); // Ensure the response code is 200 OK",
							"    pm.expect(pm.response.json()).to.have.property(\"url\"); // Assuming response contains a JSON with a \"url\" property",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://127.0.0.1:8000/"
			},
			"response": [],
			"item": [
				
			]
		},
		{
			"name": "Requesting a Non-Existent File",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify getting a 404 response for a non-existent file",
							"",
							"pm.test(\"Get 404 response for non-existent file\", function () {",
							"    pm.response.to.have.status(404); // Ensure the response code is 404 Not Found",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://127.0.0.1:8000/"
			},
			"response": [],
			"item": [
				
			]
		},
		{
			"name": "Trigger tests on new commit to PRs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check if Postman tests run on new commits to PRs",
							"",
							"pm.test(\"Postman tests run on new commits to PRs\", function () {",
							"    pm.expect(pm.info.requestName).to.include(\"PR\"); // Assuming the request name includes \"PR\"",
							"    pm.expect(pm.info.requestDescription).to.include(\"commit\"); // Check for mention of commit in request description",
							"    pm.expect(pm.info.iteration).to.be.above(0); // Ensure the iteration count is more than initial, indicating a commit",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": ""
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://127.0.0.1:8000/"
			},
			"response": [],
			"item": [
				
			]
		}
	]
}