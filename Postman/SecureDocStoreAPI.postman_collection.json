{
	"info": {
		"_postman_id": "a451724a-5da3-49bb-87b6-c04e0c6ea9df",
		"name": "SecureDocStoreAPI",
		"description": "This suite contains integration tests for the Secure Document Storage API. A Pre-request script is configured to ensure all tests resolve a valid auth token should they need it",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43175045"
	},
	"item": [
		{
			"name": "SDSHealthCheckTests",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to check the health of the API",
									"pm.test(\"Response code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body shows health status\", function() {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.be.an('object');",
									"    pm.expect(responseBody).to.have.property('Health', 'OK');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{SDSBaseUrl}}/health",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Expect a 200 OK response from /health"
					},
					"response": []
				}
			],
			"description": "Tests on the /health endpoint"
		},
		{
			"name": "SDSDocsTests",
			"item": [
				{
					"name": "Swagger Docs Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to check the health of the API",
									"pm.test(\"Response code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body includes Swagger UI elements\", function() {",
									"    pm.expect(pm.response.text()).to.include(\"Swagger UI\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{SDSBaseUrl}}/docs",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"docs"
							]
						},
						"description": "Expect a 200 OK response from Swagger route /docs, and for content to include Swagger elements."
					},
					"response": []
				}
			]
		},
		{
			"name": "SDSAuthTests",
			"item": [
				{
					"name": "Missing token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response code is 403\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"",
									"pm.test(\"response message is not authenticated\", function() {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.eql(\"Forbidden\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{SDSBaseUrl}}/retrieve_file?file_key=README.md",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"retrieve_file"
							],
							"query": [
								{
									"key": "file_key",
									"value": "README.md"
								}
							]
						},
						"description": "Expect a 403 FORBIDDEN with no authentication token (hence anonymous)"
					},
					"response": []
				},
				{
					"name": "Invalid scope token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Runs before invalid scope test",
									"",
									"function postRequest(secret) {",
									"    const postRequest = {",
									"        url: tokenUrl,",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/x-www-form-urlencoded'",
									"        },",
									"        body: {",
									"            mode: 'urlencoded',",
									"            urlencoded:",
									"                [",
									"                    { key: 'grant_type', value: 'client_credentials' },",
									"                    { key: 'client_id', value: clientId },",
									"                    { key: 'client_secret', value: secret },",
									"                    { key: 'scope', value: scope }",
									"                ]",
									"        }",
									"    };",
									"",
									"    pm.sendRequest(postRequest, (error, response) => {",
									"        let jsonData = response.json()",
									"        pm.variables.set(\"bearerToken\", jsonData.access_token)",
									"    })",
									"}",
									"",
									"// resolve variables from the environment",
									"const tokenUrl = pm.environment.get('AzureTokenUrl')",
									"const clientId = pm.environment.get('SDSClientID')",
									"const scope = pm.environment.get('InvalidScope')",
									"var envSecret = pm.environment.get('SDSClientSecret')",
									"",
									"// locally resolve secret from vault, in pipeline use env var\",",
									"if (envSecret.startsWith('{{vault:')) {",
									"    secretKey = envSecret.replace('{{vault:', '').replace('}}', '')",
									"    // use .then() in place of await to support newman runner",
									"    pm.vault.get(secretKey).then(vaultValue => postRequest(vaultValue))",
									"}",
									"else {",
									"    postRequest(envSecret)",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test invalid scope token",
									"pm.test(\"response code is 403\", function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response body shows Invalid Token\", function() {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.be.an('object');",
									"    pm.expect(responseBody).to.have.property('detail', 'Forbidden');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/retrieve_file?file_key=README.md",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"retrieve_file"
							],
							"query": [
								{
									"key": "file_key",
									"value": "README.md"
								}
							]
						},
						"description": "Expect a 403 FORBIDDEN when using a token with the wrong scope (resolved in pre-request)"
					},
					"response": []
				},
				{
					"name": "Invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Runs before invalid scope test",
									"",
									"function postRequest(secret) {",
									"    const postRequest = {",
									"        url: tokenUrl,",
									"        method: 'POST',",
									"        header: {",
									"            'Content-Type': 'application/x-www-form-urlencoded'",
									"        },",
									"        body: {",
									"            mode: 'urlencoded',",
									"            urlencoded:",
									"                [",
									"                    { key: 'grant_type', value: 'client_credentials' },",
									"                    { key: 'client_id', value: clientId },",
									"                    { key: 'client_secret', value: secret },",
									"                    { key: 'scope', value: scope }",
									"                ]",
									"        }",
									"    };",
									"",
									"    pm.sendRequest(postRequest, (error, response) => {",
									"        let jsonData = response.json()",
									"        pm.variables.set(\"bearerToken\", \"invalid token\")",
									"    })",
									"}",
									"",
									"// resolve variables from the environment",
									"const tokenUrl = pm.environment.get('AzureTokenUrl')",
									"const clientId = pm.environment.get('SDSClientID')",
									"const scope = pm.environment.get('InvalidScope')",
									"var envSecret = pm.environment.get('SDSClientSecret')",
									"",
									"// locally resolve secret from vault, in pipeline use env var\",",
									"if (envSecret.startsWith('{{vault:')) {",
									"    secretKey = envSecret.replace('{{vault:', '').replace('}}', '')",
									"    // use .then() in place of await to support newman runner",
									"    pm.vault.get(secretKey).then(vaultValue => postRequest(vaultValue))",
									"}",
									"else {",
									"    postRequest(envSecret)",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test invalid scope token",
									"pm.test(\"response code is 401\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response body shows Invalid Token\", function() {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.be.an('object');",
									"    pm.expect(responseBody).to.have.property('detail', 'Invalid or expired token');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/retrieve_file?file_key=README.md",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"retrieve_file"
							],
							"query": [
								{
									"key": "file_key",
									"value": "README.md"
								}
							]
						},
						"description": "Expect a 401 UNAUTHORIZED when using an invalid token."
					},
					"response": []
				}
			],
			"description": "Tests to ensure auth fails on invalid requests"
		},
		{
			"name": "SDSSaveFileTests",
			"item": [
				{
					"name": "Save File – New File (Expect 201)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timestamp = new Date().getTime();",
									"const uniqueFilename = `test_file_${timestamp}.md`;",
									"pm.environment.set(\"unique_filename\", uniqueFilename);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body shows success\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.be.an('object');",
									"    pm.expect(responseBody).to.have.property('success', 'File saved successfully in ' + pm.environment.get('SDSBucket') + ' with key ' + pm.environment.get('unique_filename'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_file.md",
									"fileName": "{{unique_filename}}"
								},
								{
									"key": "body",
									"value": "{\"bucketName\":\"{{SDSBucket}}\"}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/save_file",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"save_file"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save File – Existing File (Expect 200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body shows success\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.be.an('object');",
									"    pm.expect(responseBody).to.have.property(",
									"        'success',",
									"        'File saved successfully in ' + pm.environment.get('SDSBucket') +",
									"        ' with key ' + pm.environment.get('unique_filename')",
									"    );",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_file.md",
									"fileName": "{{unique_filename}}",
									"description": "uploads the file with the same name as in previous test (Save File – New File) to simulate overwriting a file"
								},
								{
									"key": "body",
									"value": "{\"bucketName\":\"{{SDSBucket}}\", \"folder\": \"\"}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/save_file",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"save_file"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save File With Virus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response detail for Virus Found\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.eql({\"detail\": [\"Virus Found\"]});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "eicar.txt"
								},
								{
									"key": "body",
									"value": "{\"bucketName\":\"{{SDSBucket}}\", \"folder\":\"testmult\"} ",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/save_file",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"save_file"
							]
						},
						"description": "Expect a 400 BAD REQUEST when saving the eicar mock virus file"
					},
					"response": []
				},
				{
					"name": "Save Disallowed File Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 415\", function () {",
									"    pm.response.to.have.status(415);",
									"});",
									"",
									"pm.test(\"File mimetype not allowed\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.eql({\"detail\": \"File mimetype not allowed\"});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_file.exe"
								},
								{
									"key": "body",
									"value": "{\"bucketName\":\"{{SDSBucket}}\", \"folder\":\"testmult\"} ",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/save_file",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"save_file"
							]
						},
						"description": "Expect a 415 UNSUPPORTED MEDIA TYPE when saving a mock executable file as disallowed by client config."
					},
					"response": []
				},
				{
					"name": "Save File With Missing Bucket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response has required fields\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property('detail');",
									"    pm.expect(responseBody.detail).to.have.property('bucketName');",
									"    pm.expect(responseBody.detail.bucketName).to.eql('Field required');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_file.md"
								},
								{
									"key": "body",
									"value": "{\"folder\":\"testmult\"} ",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/save_file",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"save_file"
							]
						},
						"description": "Expect a 400 BAD REQUEST when no bucket is defined in the save request"
					},
					"response": []
				},
				{
					"name": "Save File Without File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property('detail');",
									"    pm.expect(responseBody.detail).to.include('File is required');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "body",
									"value": "{\"bucketName\":\"{{SDSBucket}}\", \"folder\":\"testmult\"} ",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/save_file",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"save_file"
							]
						},
						"description": "Expect a 400 BAD REQUEST when calling save_file without a file"
					},
					"response": []
				}
			],
			"description": "Tests on the /save_file endpoint",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SDSRetrieveFileTests",
			"item": [
				{
					"name": "Retrieve File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test retrieve file",
									"pm.test(\"response code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response contains fileURL key\", function() {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property('fileURL').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/retrieve_file?file_key={{unique_filename}}.md",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"retrieve_file"
							],
							"query": [
								{
									"key": "file_key",
									"value": "{{unique_filename}}.md"
								}
							]
						},
						"description": "Run 'Save File' request first then expect 200 OK"
					},
					"response": []
				},
				{
					"name": "Retrieve Non-Existent File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to verify getting a 404 response for a non-existent file",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response body shows file not found\", function() {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.be.an('object');",
									"    pm.expect(responseBody).to.have.property('detail', 'The file non_existent could not be found.');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/retrieve_file?file_key=non_existent",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"retrieve_file"
							],
							"query": [
								{
									"key": "file_key",
									"value": "non_existent"
								}
							]
						},
						"description": "Expect 404 NOT FOUND when requesting a file that does not exist"
					},
					"response": []
				}
			],
			"description": "Test on the /retrieve_file endpoint"
		},
		{
			"name": "SDSUploadFileTests",
			"item": [
				{
					"name": "Upload File - New File (Expect 201)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body shows success\", function() {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.be.an('object');",
									"    pm.expect(responseBody).to.have.property('success', 'File saved successfully in ' + pm.environment.get('SDSBucket') + ' with key ' + pm.environment.get('unique_filename'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timestamp = new Date().getTime();",
									"const uniqueFilename = `test_file_${timestamp}.md`;",
									"pm.environment.set(\"unique_filename\", uniqueFilename);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "body",
									"value": "{\"bucketName\": \"{{SDSBucket}}\"}",
									"type": "text"
								  },
								  {
									"key": "file",
									"type": "file",
									"src": "test_file.md",
									"fileName": "{{unique_filename}}"
								}
							]
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/upload_file",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"upload_file"
							]
						},
						"description": "Expect a 201 OK when uploading a new file."
					},
					"response": []
				},
				{
					"name": "Upload File - Existing File (Expect 409)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", function () {",
									"    pm.response.to.have.status(409);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property('detail');",
									"    pm.expect(responseBody.detail).to.include('File ' + pm.environment.get('unique_filename') + ' already exists and cannot be overwritten via the /upload_file endpoint. Use PUT endpoint /save_file to overwrite.');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
""
								],
								"type": "text/javascript",
								"packages": {}
							  }
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "body",
									"value": "{\"bucketName\": \"{{SDSBucket}}\"}",
									"type": "text"
								  },
								  {
									"key": "file",
									"type": "file",
									"src": "test_file.md",
									"fileName": "{{unique_filename}}"
								}
							]
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/upload_file",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"upload_file"
							]
						},
						"description": "Expect a 409 when uploading a file that already exists in bucket ."
					},
					"response": []
				},
				{
					"name": "Upload File With Virus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check response detail for Virus Found\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.eql({\"detail\": [\"Virus Found\"]});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "eicar.txt"
								},
								{
									"key": "body",
									"value": "{\"bucketName\":\"{{SDSBucket}}\", \"folder\":\"testmult\"} ",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/upload_file",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"upload_file"
							]
						},
						"description": "Expect a 400 BAD REQUEST when uploading the eicar mock virus file"
					},
					"response": []
				},
				{
					"name": "Upload Disallowed File Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 415\", function () {",
									"    pm.response.to.have.status(415);",
									"});",
									"",
									"pm.test(\"File mimetype not allowed\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.eql({\"detail\": \"File mimetype not allowed\"});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_file.exe"
								},
								{
									"key": "body",
									"value": "{\"bucketName\":\"{{SDSBucket}}\", \"folder\":\"testmult\"} ",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/upload_file",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"upload_file"
							]
						},
						"description": "Expect a 415 UNSUPPORTED MEDIA TYPE when uploading a mock executable file as disallowed by client config."
					},
					"response": []
				},
				{
					"name": "Upload File With Missing Bucket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response has required fields\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property('detail');",
									"    pm.expect(responseBody.detail).to.have.property('bucketName');",
									"    pm.expect(responseBody.detail.bucketName).to.eql('Field required');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "test_file.md"
								},
								{
									"key": "body",
									"value": "{\"folder\":\"testmult\"} ",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/upload_file",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"upload_file"
							]
						},
						"description": "Expect a 400 BAD REQUEST when no bucket is defined in the upload request"
					},
					"response": []
				},
				{
					"name": "Upload File Without File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property('detail');",
									"    pm.expect(responseBody.detail).to.include('File is required');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								},
								{
									"key": "body",
									"value": "{\"bucketName\":\"{{SDSBucket}}\", \"folder\":\"testmult\"} ",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{SDSBaseUrl}}/upload_file",
							"host": [
								"{{SDSBaseUrl}}"
							],
							"path": [
								"upload_file"
							]
						},
						"description": "Expect a 400 BAD REQUEST when calling upload_file without a file"
					},
					"response": []
				}
			],
			"description": "Tests on the /upload_file endpoint",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Always runs before every request",
					"",
					"function postRequest(secret) {",
					"    const postRequest = {",
					"        url: tokenUrl,",
					"        method: 'POST',",
					"        header: {",
					"            'Content-Type': 'application/x-www-form-urlencoded'",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded:",
					"                [",
					"                    { key: 'grant_type', value: 'client_credentials' },",
					"                    { key: 'client_id', value: clientId },",
					"                    { key: 'client_secret', value: secret },",
					"                    { key: 'scope', value: scope }",
					"                ]",
					"        }",
					"    };",
					"",
					"    pm.sendRequest(postRequest, (error, response) => {",
					"        let jsonData = response.json()",
					"        pm.variables.set(\"bearerToken\", jsonData.access_token)",
					"    })",
					"}",
					"",
					"// resolve variables from the environment",
					"const tokenUrl = pm.environment.get('AzureTokenUrl')",
					"const clientId = pm.environment.get('SDSClientID')",
					"const scope = pm.environment.get('ValidScope')",
					"var envSecret = pm.environment.get('SDSClientSecret')",
					"",
					"// locally resolve secret from vault, in pipeline use env var\",",
					"if (envSecret.startsWith('{{vault:')) {",
					"    secretKey = envSecret.replace('{{vault:', '').replace('}}', '')",
					"    // use .then() in place of await to support newman runner",
					"    pm.vault.get(secretKey).then(vaultValue => postRequest(vaultValue))",
					"}",
					"else {",
					"    postRequest(envSecret)",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}